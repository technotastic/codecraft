--- START FILE: tsconfig.node.json ---
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
      "composite": true,
      "module": "ESNext",
      "moduleResolution": "Node",
      "target": "ESNext",
      "lib": ["ESNext"],
      "noEmit": false,
      "outDir": "dist-electron",
      "rootDir": "src", // Keep this as src
  
      /* Override conflicting option from base config */
      "allowImportingTsExtensions": false, // Keep this override
  
      /* Aliases */
      "paths": {
        "@renderer/*": ["./renderer/*"],
        "@main/*": ["./main/*"],
        "@preload/*": ["./preload/*"]
        // Alias for shared removed, assuming relative path or direct include works
      }
    },
    // Remove vite.config.ts from include
    "include": ["src/main", "src/preload", "src/shared.types.ts"], // <--- REMOVED vite.config.ts
    "exclude": ["node_modules", "dist", "dist-electron", "src/renderer"]
  }
--- END FILE: tsconfig.node.json ---

--- START FILE: text.txt ---
--- END FILE: text.txt ---

--- START FILE: index.html ---
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" /> <!-- Example icon -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>CodeCraft IDE (TS)</title>
  </head>
  <body>
    <div id="root"></div>
    <!-- Entry point is now main.tsx -->
    <script type="module" src="/src/renderer/main.tsx"></script>
  </body>
</html>
--- END FILE: index.html ---

--- START FILE: .gitignore ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (if used)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (if used)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env*.local
.env.*.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build output
.nuxt
dist

# Nuxt.js static build output
.output

# Docusaurus cache and build output (if used)
.docusaurus

# Gatsby cache and build output
.cache/
public

# SvelteKit build output
.svelte-kit

# Remix build output
.cache/
build/
public/build/

# Vite build output
dist/
# Vite Electron build output (specifically for main/preload JS)
dist-electron/

# Vite cache directory
.vite/

# Electron Packager/Builder Output
release/
out/
build/ # Often used by electron-builder, check config if different

# macOS specific files
.DS_Store
.AppleDouble
.LSOverride

# Thumbnails
Thumbs.db
ehthumbs.db
ehthumbs_vista.db

# Swap files
*.swp
*.swo

# IDE specific files
.idea/
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.sublime-workspace
*.sublime-project

# Misc
*.iml
--- END FILE: .gitignore ---

--- START FILE: vite.config.ts ---
// vite.config.ts (Reverted to last valid state)
import { defineConfig } from 'vite';
import path from 'node:path';
import electronRenderer from 'vite-plugin-electron-renderer';
import react from '@vitejs/plugin-react';
import { rmSync } from 'node:fs';

export default defineConfig({
  plugins: [
    react(),
    electronRenderer({}),
  ],
  build: {
    outDir: 'dist/renderer',
  },
  resolve: {
    alias: {
      '@renderer': path.resolve(__dirname, './src/renderer'),
      '@main': path.resolve(__dirname, './src/main'),
      '@preload': path.resolve(__dirname, './src/preload'),
      '@shared': path.resolve(__dirname, './src/shared'),
    },
  },
  root: '.',
  server: {
     // Optional server options like port can go here
   },
  optimizeDeps: {
    force: true // To force re-bundling
  }
});
--- END FILE: vite.config.ts ---

--- START FILE: tsconfig.json ---
// tsconfig.json
{
    "compilerOptions": {
      "target": "ESNext",
      "lib": ["DOM", "DOM.Iterable", "ESNext"],
      "module": "ESNext",
      "skipLibCheck": true,
  
      /* Bundler mode */
      "moduleResolution": "bundler",
      "allowImportingTsExtensions": true,
      "resolveJsonModule": true,
      "isolatedModules": true,
      "noEmit": true, // Vite handles emission for renderer code
      "jsx": "react-jsx",
  
      /* Interop Constraints */
      "esModuleInterop": true,
      "forceConsistentCasingInFileNames": true,
  
      /* Linting */
      "strict": true,
      "noUnusedLocals": true,
      "noUnusedParameters": true,
      "noFallthroughCasesInSwitch": true,
  
      /* Aliases */
      "baseUrl": ".",
      "paths": {
        "@renderer/*": ["src/renderer/*"],
        "@main/*": ["src/main/*"],
        "@preload/*": ["src/preload/*"],
        "@shared/*": ["src/shared/*"] // Adjust if you don't have src/shared
      }
    },
    "include": ["src/renderer", "src/shared.types.ts", "src/vite-env.d.ts"], // Adjust if files are elsewhere
    "references": [{ "path": "./tsconfig.node.json" }]
  }
--- END FILE: tsconfig.json ---

--- START FILE: src/renderer/App.tsx ---
// src/renderer/App.tsx
import React, { useState } from 'react';

function App() {
  const [message, setMessage] = useState<string>('Click Ping to test IPC!');

  const testIPC = async () => {
    try {
      // Use the exposed function from preload script - TS knows its shape!
      const response = await window.electronAPI.ping();
      setMessage(`IPC Response: ${response}`);
    } catch (error) {
      const errMsg = error instanceof Error ? error.message : String(error);
      setMessage(`IPC Error: ${errMsg}`);
      console.error('IPC Error:', error);
    }
  };

  return (
    <div>
      <h1>Hello from React & TypeScript in Electron!</h1>
      <p>Welcome to CodeCraft IDE V0.0.1 (TS Edition)</p>
      <button onClick={testIPC}>Ping Main Process</button>
      <p>{message}</p>
      {/* We'll add Layout, Editor, Terminal, FileTree here */}
    </div>
  );
}

export default App;
--- END FILE: src/renderer/App.tsx ---

--- START FILE: src/renderer/vite-env.d.ts ---
// src/renderer/vite-env.d.ts
/// <reference types="vite/client" />

// Make the preload API available on the window object
import type { ElectronAPI } from '@preload/index'; // Import the interface

declare global {
  interface Window {
    electronAPI: ElectronAPI;
  }
}

// Make TypeScript happy about process not being defined in renderer
// declare const process: {
//     env: {
//         NODE_ENV: 'development' | 'production';
//         // Add other env variables if needed
//     };
// };
--- END FILE: src/renderer/vite-env.d.ts ---

--- START FILE: src/renderer/main.tsx ---
// src/renderer/main.tsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App'; // Import the App component
import './index.css'; // Optional base styles

const rootElement = document.getElementById('root');
if (!rootElement) throw new Error('Failed to find the root element');

const root = ReactDOM.createRoot(rootElement);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
--- END FILE: src/renderer/main.tsx ---

--- START FILE: src/renderer/index.css ---

--- END FILE: src/renderer/index.css ---

--- START FILE: src/main/env.d.ts ---
interface ImportMetaEnv {
    // Add environment variables used by your main process code here
    readonly VITE_DEV_SERVER_URL?: string; // Optional: Used by Electron window loading logic
    readonly PROD: boolean; // Based on your usage 'import.meta.env.PROD'
    readonly DEV: boolean; // Often useful to have DEV as well
    // Add any other custom VITE_ prefixed variables you might use in main.ts
    // readonly VITE_MY_API_KEY: string;
  }
  
  interface ImportMeta {
    readonly env: ImportMetaEnv;
  }
--- END FILE: src/main/env.d.ts ---

--- START FILE: src/main/index.ts ---
// src/main/index.ts
import { app, BrowserWindow, shell, ipcMain } from 'electron';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

// Define __dirname for ES module scope
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Handle creating/removing shortcuts on Windows install/uninstall.
if (import.meta.env.PROD && process.platform === 'win32') {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    if (require('electron-squirrel-startup')) {
      app.quit();
    }
  }


let mainWindow: BrowserWindow | null = null;

function createWindow() {
  mainWindow = new BrowserWindow({
    width: 1200,
    height: 800,
    webPreferences: {
      preload: path.join(__dirname, '../preload/index.js'), // Points to compiled preload JS
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  // Vite DEV server URL or Production build path
  const VITE_DEV_SERVER_URL = process.env['VITE_DEV_SERVER_URL']

  if (VITE_DEV_SERVER_URL) {
    mainWindow.loadURL(VITE_DEV_SERVER_URL);
     // Automatically open DevTools in development
     mainWindow.webContents.openDevTools();
  } else {
    // Load the index.html file for production build
    // Ensure this path matches your vite build output structure
    mainWindow.loadFile(path.join(__dirname, '../../dist/renderer/index.html'));
  }


  // Open links in default browser
  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    if (url.startsWith('http:') || url.startsWith('https:')) {
        shell.openExternal(url);
    }
    return { action: 'deny' };
  });

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
}

app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (mainWindow === null) {
    createWindow();
  }
});

// Basic IPC Example
ipcMain.handle('ping', () => 'pong from main!');
--- END FILE: src/main/index.ts ---

--- START FILE: src/shared.types.ts ---

--- END FILE: src/shared.types.ts ---

--- START FILE: src/preload/index.ts ---
// src/preload/index.ts
import { contextBridge, ipcRenderer } from 'electron';

// Define the shape of the API we're exposing
export interface ElectronAPI {
  ping: () => Promise<string>;
  // Add more functions here later:
  // readFile: (path: string) => Promise<string>;
  // onTerminalData: (callback: (data: string) => void) => void;
}

// Create the API object
const api: ElectronAPI = {
  ping: () => ipcRenderer.invoke('ping'),
  // readFile: (path) => ipcRenderer.invoke('read-file', path),
  // onTerminalData: (callback) => ipcRenderer.on('terminal-data', (_event, data) => callback(data)),
};

// Expose the API to the renderer process under 'window.electronAPI'
try {
  contextBridge.exposeInMainWorld('electronAPI', api);
  console.log('Preload script exposed electronAPI successfully.');
} catch (error) {
  console.error('Error exposing context bridge:', error);
}

// You can also expose other specific things if needed, but keep it minimal
// contextBridge.exposeInMainWorld('versions', {
//   node: () => process.versions.node,
//   chrome: () => process.versions.chrome,
//   electron: () => process.versions.electron
// });
--- END FILE: src/preload/index.ts ---

--- START FILE: package.json ---
{
  "name": "codecraft-ide",
  "version": "0.1.0",
  "description": "A custom IDE built with Electron, React, and TypeScript",
  "main": "dist-electron/main/index.js",
  "type": "module",
  "scripts": {
    "dev": "vite --config vite.config.ts --debug",
    "build": "tsc --project tsconfig.node.json && vite build && electron-builder",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "clean": "rm -rf dist dist-electron build release"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "react": "^19.1.0",
    "react-dom": "^19.1.0"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@types/node": "^20.12.12",
    "@vitejs/plugin-react": "^4.3.0",
    "electron": "^30.0.9",
    "electron-builder": "^24.13.3",
    "typescript": "^5.4.5",
    "vite": "^5.2.11",
    "vite-plugin-electron-renderer": "^0.14.6"
  }
}
--- END FILE: package.json ---

