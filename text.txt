--- START FILE: text.txt ---

---

**Project Continuation Prompt: CodeCraft IDE (State after Fixing Recent Folders & Editor Theme)**

**1. Project Goal:**
To build a functional desktop code editor (CodeCraft IDE) using Electron, React, TypeScript, and Vite, featuring an integrated terminal, file management, and basic customization.

**2. Core Technologies:**
*   **Framework:** Electron
*   **UI (Renderer):** React, TypeScript, Vite
*   **Persistence:** `electron-store` (for recent folders)
*   **Editor Component:** Monaco Editor (`react-monaco-editor`)
*   **Terminal Component:** Xterm.js + `node-pty` (via IPC)
*   **Layout:** `allotment`
*   **Styling:** CSS Variables, Theme Context

**3. Current State Summary:**

*   **Development Environment:** Manual setup using Vite dev server (`dev:vite`), `tsc --watch` for main/preload (`dev:main`), and `electron .` (`start`) in separate terminals. **Node.js version upgraded to v20+** to support dependencies. `electron-store` downgraded to v8 to resolve ESM/CJS compatibility issues during build/runtime. Installation process stabilized.
*   **Architecture:**
    *   **Main Process (`main/index.ts`):** Handles window (starts fullscreen), app menu, IPC (dialogs, multi-PTY, filesystem, recent folders), basic app controls. Uses `electron-store@8` (CommonJS) for persisting recent folders list.
    *   **Preload Script (`preload/index.ts`):** Securely exposes typed `electronAPI` via `contextBridge` for all renderer-main communication, including fetching recent folders.
    *   **Renderer Process (`renderer/`):** React app managed by Vite.
        *   **State Management:** `currentFolderPath` state lifted to `App.tsx` and passed down to `Sidebar`, `MainPanel`, `EditorPanel`, and `WelcomeScreen` via props to enable cross-component updates.
*   **Key Features Implemented & Stable:**
    *   **Layout:** Resizable horizontal split (Sidebar/Main Area) and vertical split (Editor/Terminal Area) using `Allotment`.
    *   **Theming:** `ThemeContext` manages theme name and font size modifier. Applies `.theme-*` class to root/body. Includes a `CustomSelect` dropdown for theme switching. **Editor panel theme now correctly updates and matches the global theme when files are opened.** Base editor/terminal background/foreground colors update correctly. Monaco theme definitions updated to handle CSS variables more robustly.
    *   **Contexts:** `ThemeContext`, `EditorContext`, `TerminalContext` manage relevant application state.
    *   **Sidebar:**
        *   Displays an expandable file tree (`FileTreeNode`) populated via `fs:readDirectory` IPC. Tree root controlled by `currentFolderPath` prop from `App`.
        *   Supports "Open Folder..." (via button and File menu) which updates the `currentFolderPath` state in `App` via a callback prop.
        *   Supports navigating up directories.
        *   Clicking files opens them in the editor via `fs:readFile` IPC and `EditorContext`.
    *   **Editor Area:**
        *   Managed by `EditorContext`, supporting multiple file tabs (`TabContainer`, `Tab`).
        *   Handles opening, closing, and focusing tabs.
        *   Tracks and displays file dirty status (`*`) on tabs.
        *   **Saving Confirmed Working:** Saving files via Ctrl+S (`fs:saveFile` IPC) reliably updates the file content and context state.
        *   Renders Monaco Editor instance (`EditorPanel`) when files are open.
        *   **Welcome Screen:** Displays (`WelcomeScreen.tsx`) when no files are open in the editor area.
            *   Fetches and displays a list of recently opened folders from `electron-store` via IPC.
            *   **Recent folders list is now clickable**, correctly updating the `currentFolderPath` state in `App` and loading the selected folder in the sidebar.
        *   Basic language detection based on file extension (used for status bar display).
    *   **Terminal Area:**
        *   Managed by `TerminalContext`, supports multiple terminal tabs (`TerminalTabContainer`, `TerminalTab`) via '+' button.
        *   Renders Xterm.js instances (`TerminalPanel`) per tab, managing visibility via CSS.
        *   Multi-instance PTY communication via IPC (`pty-create`, `pty-input`, etc.) is functional.
        *   Terminal background/foreground colors update based on the selected app theme.
        *   Rendering issues (blank screens, color bleeding, cursor offsets) previously fixed remain fixed.
        *   Clear Terminal Button functional.
    *   **Status Bar:**
        *   Implemented (`StatusBar.tsx`, `StatusBar.css`) and displays active file name, dirty status, error status, cursor line/column, basic detected language, live time, and placeholder encoding.
    *   **Command Palette:** Basic implementation (`CommandPalette.tsx`) exists, toggled via `Ctrl/Cmd+Shift+P`. Includes commands for app/window control, new terminal, opening folders, theme switching, and font size adjustment.
*   **Development Server Interaction:** Saving `index.html` triggers Vite reload.

**4. Known Issues / Regressions & Failed Attempts:**

*   **Syntax Highlighting (BROKEN):**
    *   While base Monaco themes (background, foreground, selection, minimap) now apply correctly and respect the global theme, **token-based syntax highlighting does not work.**
    *   Keywords, strings, comments, etc., do not receive distinct colors for any language. They seem to inherit the default foreground color.
    *   Switching application themes updates base colors but does *not* affect token colors.
    *   Previous attempts to fix this by adding `rules` to `defineTheme` have failed. Extreme caution required. The current `defineTheme` calls explicitly leave the `rules: []` array empty.
*   **"Save As..." Feature Attempt (FAILED & REVERTED):**
    *   An attempt to implement "Save As..." resulted in a blank screen.
    *   **These changes remain fully reverted.**

**5. V1 Goals Status (Reflecting Current State):**

*   Functional Monaco Editor (Partially Done - multi-file, saving fixed, base theming fixed. **Highlighting broken.** "Save As..." failed.)
*   Integrated Terminal (Done - multi-tab, rendering fixed, clear button added)
*   File Tree/Management (Done - open/read/display/save, up navigation)
*   Theming (Foundation done, base editor/terminal colors work. **Syntax highlighting broken.** Advanced features deferred.)
*   Font Size Control (Done - via Command Palette)
*   Movable/Resizable Panels (Done)
*   Status Bar (Done)
*   Welcome Screen (Done - includes clickable recent folders)
*   Command Palette (Basic implementation Done)

**6. Next Steps / Potential Tasks (Prioritization Needed):**

*   **(CRITICAL BUG) Fix Syntax Highlighting:** This remains the top priority. Needs a *different approach*. Possible next steps:
    *   Verify Monaco language services/workers are loading correctly in the Vite/Electron environment.
    *   Try loading a pre-built community theme file (`.json`) for Monaco instead of using `defineTheme` to see if *any* tokenization works.
    *   Investigate potential conflicts between Vite build process and Monaco's worker loading.
*   **(HIGH) Implement "Save As..." Functionality:** Re-attempt carefully, starting with isolated main process logic.
*   **(MED) Editor Polish:**
    *   Wire up Edit Menu items (Undo/Redo should work via roles, need testing/verification).
*   **(MED) Welcome Screen Polish:**
    *   Make "Open Folder" hint button functional (requires passing handler down).
    *   Add "New File" button/functionality.
*   **(MED) Terminal Polish:**
    *   Improve visual feedback for exited terminal processes (beyond tab title, e.g., dim panel).
*   **(MED) Main Menu / Accelerators:** Review standard menu items and accelerators for correctness and platform consistency (e.g., Ctrl+O added for Open Folder).
*   **(MED) Error Handling:** Improve user feedback for filesystem/PTY errors beyond current basic messages/console logs.
*   **(LOW) File Management Extras:** New File/Folder, Delete, Rename.
*   **(LOW) Theming - VS Code Import:** Parse `.json` themes.
*   **(LOW) Font Loading:** Robust custom font loading.

**7. Future Ideas Brainstorm:**
*   Project-wide Search (`ripgrep`)
*   Git Integration (Status, Basic Commands)
*   Command Palette Enhancements (fuzzy search, more commands)
*   Snippets
*   Debugger Integration (DAP)
*   Plugin System
*   Settings UI (`electron-store`)
*   Remote/SSH Integration
*   Web Version (`vscode-web`)
*   AI Code Assistance
*   Markdown Preview
*   Advanced Layouts (`react-mosaic`)

**8. Action Requested for Next Session:**

Given the recent fixes (recent folders, editor base theme) but the persistent critical bug (syntax highlighting):

*   **Focus solely on diagnosing and attempting a fix for the BROKEN Syntax Highlighting.**
*   Propose a **single, specific, and verifiable step** to investigate *why* token colors are not being applied. Avoid complex `defineTheme` modifications initially. Consider focusing on verifying language service/worker loading or trying a standard pre-built Monaco theme JSON file.
*   Any proposed solution **MUST** prioritize stability and explain why it's unlikely to break the now-working base theming or other features.

---

This updated prompt reflects the successful integration of recent folders, the fix for the editor background theming, the state lifting refactor, and the dependency adjustments, while re-emphasizing the critical need to address syntax highlighting next.
--- END FILE: text.txt ---


****OLDER PROMPTS BELOW *****

---

**Project Continuation Prompt: CodeCraft IDE (State after Reverting Failed 'Save As...' Attempt)**

**1. Project Goal:**
To build a functional desktop code editor (CodeCraft IDE) using Electron, React, TypeScript, and Vite, featuring an integrated terminal, file management, and basic customization.

**2. Core Technologies:**
*   **Framework:** Electron
*   **UI (Renderer):** React, TypeScript, Vite
*   **Editor Component:** Monaco Editor (`react-monaco-editor`)
*   **Terminal Component:** Xterm.js + `node-pty` (via IPC)
*   **Layout:** `allotment`
*   **Styling:** CSS Variables, Theme Context

**3. Current Stable State Summary:**

*   **Development Environment:** Manual setup using Vite dev server (`dev:vite`), `tsc --watch` for main/preload (`dev:main`), and `electron .` (`start`) in separate terminals.
*   **Architecture:**
    *   **Main Process (`main/index.ts`):** Handles window (starts fullscreen), app menu, IPC (dialogs, multi-PTY, filesystem), basic app controls.
    *   **Preload Script (`preload/index.ts`):** Securely exposes typed `electronAPI` via `contextBridge` for all renderer-main communication.
    *   **Renderer Process (`renderer/`):** React app managed by Vite.
*   **Key Features Implemented & Stable:**
    *   **Layout:** Resizable horizontal split (Sidebar/Main Area) and vertical split (Editor/Terminal Area) using `Allotment`.
    *   **Theming:** `ThemeContext` manages theme name (e.g., 'dark', 'pipboy', 'win95') and font size modifier. Applies `.theme-*` class to root/body. Includes a `CustomSelect` dropdown in the sidebar for theme switching. Base editor/terminal background/foreground colors update correctly.
    *   **Contexts:** `ThemeContext`, `EditorContext`, `TerminalContext` manage relevant application state.
    *   **Sidebar:**
        *   Displays an expandable file tree (`FileTreeNode`) populated via `fs:readDirectory` IPC. Fetching children on expansion works.
        *   Supports "Open Folder..." to set the tree root.
        *   Supports navigating up directories.
        *   Clicking files opens them in the editor via `fs:readFile` IPC and `EditorContext`.
    *   **Editor Area:**
        *   Managed by `EditorContext`, supporting multiple file tabs (`TabContainer`, `Tab`).
        *   Handles opening, closing, and focusing tabs.
        *   Tracks and displays file dirty status (`*`) on tabs.
        *   **Saving Confirmed Working:** Saving files via Ctrl+S (`fs:saveFile` IPC) reliably updates the file content and context state. Stale state issues previously encountered are resolved.
        *   Renders Monaco Editor instance (`EditorPanel`).
        *   Basic language detection based on file extension (used for status bar display).
    *   **Terminal Area:**
        *   Managed by `TerminalContext`, supports multiple terminal tabs (`TerminalTabContainer`, `TerminalTab`) via '+' button.
        *   Renders Xterm.js instances (`TerminalPanel`) per tab, managing visibility via CSS.
        *   Multi-instance PTY communication via IPC (`pty-create`, `pty-input`, etc.) is functional.
        *   Terminal background/foreground colors update based on the selected app theme.
        *   **Rendering Issues Fixed:** Resolved previous issues with blank screens, color bleeding, and cursor offsets on tab switching.
        *   **Clear Terminal Button Added & Functional:** The button in the active terminal panel correctly clears the xterm instance via context/events.
    *   **Status Bar:**
        *   Implemented (`StatusBar.tsx`, `StatusBar.css`) and displays active file name, dirty status, error status, cursor line/column, basic detected language, live time, and placeholder encoding.
*   **Development Server Interaction:** Saving the root `index.html` during development correctly triggers a Vite full page reload (expected behavior).

**4. Known Issues / Regressions & Failed Attempts:**

*   **Syntax Highlighting (BROKEN):**
    *   While base Monaco themes (background, foreground, selection) are applied correctly via CSS vars and `defineTheme` in `EditorPanel.tsx` (on mount), token-based syntax highlighting does not work.
    *   Token colors (for keywords, strings, comments, etc.) do not appear correctly for any language.
    *   Switching application themes does *not* update token colors.
    *   **Multiple previous attempts to fix this (by adding `rules` to `defineTheme` and trying dynamic theme redefinition) have failed, sometimes breaking base theme colors.** Extreme caution is required here.
*   **"Save As..." Feature Attempt (FAILED & REVERTED):**
    *   An attempt to implement "Save As..." functionality (involving menu changes, new IPC dialog, context updates) resulted in a **blank screen** on application startup.
    *   **These changes have been fully reverted.** The codebase is back to the state *before* this attempt.

**5. V1 Goals Status (Reflecting Current State):**

*   Functional Monaco Editor (Partially Done - multi-file, saving fixed. **Highlighting broken.** "Save As..." failed.)
*   Integrated Terminal (Done - multi-tab, rendering fixed, clear button added)
*   File Tree/Management (Done - basic open/read/display/save)
*   Theming (Foundation done. **Syntax highlighting broken.** Advanced features deferred.)
*   Font Size Control (Done)
*   Movable/Resizable Panels (Done)
*   Status Bar (Done)

**6. Next Steps / Potential Tasks (Prioritization Needed):**

*   **(CRITICAL BUG) Fix Syntax Highlighting:** Re-attempt diagnosing why token colors aren't working/updating. Needs a *different approach* than previous attempts, focusing on reliability and avoiding regressions. Potentially explore simpler theme application methods if `defineTheme` proves too fragile with dynamic CSS vars.
*   **(MED) Implement "Save As..." Functionality:** Re-attempt this feature, carefully diagnosing the cause of the previous blank-screen failure. Needs meticulous implementation and testing.
*   **(MED) Editor Polish:**
    *   Wire up Edit Menu items (Undo/Redo integration - investigate Monaco's built-in support).
*   **(MED) Terminal Polish:**
    *   Improve visual feedback for exited terminal processes (beyond tab title).
*   **(MED) Main Menu / Accelerators:** Review standard menu items and accelerators for correctness and platform consistency.
*   **(MED) Error Handling:** Improve user feedback for filesystem/PTY errors beyond current basic messages.
*   **(LOW) File Management Extras:** New File/Folder, Delete, Rename.
*   **(LOW) Theming - VS Code Import:** Parse `.json` themes.
*   **(LOW) Font Loading:** Robust custom font loading.

**7. Future Ideas Brainstorm:**
*   Project-wide Search (`ripgrep`)
*   Git Integration (Status, Basic Commands)
*   Command Palette (Ctrl+Shift+P)
*   Snippets
*   Debugger Integration (DAP)
*   Plugin System
*   Settings UI (`electron-store`)
*   Remote/SSH Integration
*   Web Version (`vscode-web`)
*   AI Code Assistance
*   Markdown Preview
*   Advanced Layouts (`react-mosaic`)

**8. Action Requested for Next Session:**

Given the current stable state (with working save, terminal, file tree) but the critically broken syntax highlighting and the recent catastrophic failures when attempting fixes/features:

*   **What is the *single*, most impactful, and **absolutely safest** feature or fix to attempt next?**
*   **Strongly consider:**
    *   Prioritizing stability above all else.
    *   Choosing a task with minimal dependencies on complex state interactions or component lifecycles.
    *   Potentially breaking down larger goals (like highlighting or "Save As...") into much smaller, verifiable steps if attempting them again.
*   **Any proposed solution MUST:**
    *   Clearly explain *why* it is safe and unlikely to cause regressions based on past failures.
    *   Be conceptually simple and testable in isolation if possible.

---

This prompt provides a much clearer picture of the validated working parts, the specific known failures, and sets a strong expectation for stability and caution in the next interaction. Hopefully, this helps us move forward more reliably.
---


*** BELOW ARE ALL OLDER PROMPTS, AND CAN BE IGNORED ***



**Project Continuation Prompt: CodeCraft IDE**

**1. Project Goal:**
To build a functional desktop code editor (CodeCraft IDE) using Electron, React, TypeScript, and Vite, featuring an integrated terminal, file management, and basic customization.

**2. Core Technologies:**
*   **Framework:** Electron
*   **UI (Renderer):** React, TypeScript, Vite
*   **Editor Component:** Monaco Editor (`react-monaco-editor`)
*   **Terminal Component:** Xterm.js + `node-pty` (via IPC)
*   **Layout:** `allotment`
*   **Styling:** CSS Variables, Theme Context

**3. Current State Summary:**

*   **Development Environment:** Manual setup using Vite dev server (`dev:vite`), `tsc --watch` for main/preload (`dev:main`), and `electron .` (`start`) in separate terminals.
*   **Architecture:**
    *   **Main Process (`main/index.ts`):** Handles window (starts fullscreen), app menu, IPC (dialogs, multi-PTY, filesystem), basic app controls.
    *   **Preload Script (`preload/index.ts`):** Securely exposes typed `electronAPI` via `contextBridge` for all renderer-main communication.
    *   **Renderer Process (`renderer/`):** React app managed by Vite.
*   **Key Features Implemented:**
    *   **Layout:** Resizable horizontal split (Sidebar/Main Area) and vertical split (Editor/Terminal Area) using `Allotment`.
    *   **Theming:** `ThemeContext` manages theme name (e.g., 'dark', 'pipboy', 'win95') and font size modifier. Applies `.theme-*` class to root/body. Includes a `CustomSelect` dropdown in the sidebar for theme switching.
    *   **Contexts:** `ThemeContext`, `EditorContext`, `TerminalContext` manage relevant application state.
    *   **Sidebar:**
        *   Displays an expandable file tree (`FileTreeNode`) populated via `fs:readDirectory` IPC.
        *   Supports "Open Folder..." to set the tree root.
        *   Supports navigating up directories.
        *   Clicking files opens them in the editor via `fs:readFile` IPC and `EditorContext`.
    *   **Editor Area:**
        *   Managed by `EditorContext`, supporting multiple file tabs (`TabContainer`, `Tab`).
        *   Handles opening, closing, and focusing tabs.
        *   Tracks and displays file dirty status (`*`) on tabs.
        *   **Saving Fixed:** Saving files via Ctrl+S (`fs:saveFile` IPC) now reliably updates the file content and context state. Stale state issues resolved.
        *   Renders Monaco Editor instance (`EditorPanel`).
        *   Basic language detection based on file extension (used for status bar display).
        *   **Syntax Highlighting:** **NOT FUNCTIONAL.** While basic Monaco themes (background, foreground) are applied, token-based syntax highlighting does not change with themes or work correctly.
    *   **Terminal Area:**
        *   Managed by `TerminalContext`, supports multiple terminal tabs (`TerminalTabContainer`, `TerminalTab`) via '+' button.
        *   Renders Xterm.js instances (`TerminalPanel`) per tab, managing visibility via CSS.
        *   Multi-instance PTY communication via IPC (`pty-create`, `pty-input`, etc.) is functional.
        *   Terminal background/foreground colors update based on the selected app theme.
        *   **Rendering Issues Fixed:** Resolved previous issues with blank screens, color bleeding, and cursor offsets on tab switching.
    *   **Status Bar:**
        *   Implemented (`StatusBar.tsx`, `StatusBar.css`).
        *   Displays active file name, dirty status, error status.
        *   Displays cursor line/column number.
        *   Displays basic detected language of the active file.
        *   Displays live-updating current time.
        *   Displays placeholder encoding (UTF-8).
*   **Development Server Interaction:** Saving the root `index.html` during development correctly triggers a Vite full page reload (expected behavior).

**4. V1 Goals Status:**
*   Functional Monaco Editor (Partially Done - multi-file, saving fixed. **Highlighting broken.**)
*   Integrated Terminal (Done - multi-tab, rendering fixed)
*   File Tree/Management (Done - basic open/read/display/save)
*   Theming (Foundation done. **Syntax highlighting broken.** Advanced features deferred.)
*   Font Size Control (Done)
*   Movable/Resizable Panels (Done)
*   Status Bar (Done)

**5. Next Steps to Implement (Suggestions):**

*   **(HIGH) Fix Syntax Highlighting:** Diagnose why token colors aren't being applied correctly or changing with themes. Revisit theme definition in `EditorPanel.tsx` (`monaco.editor.defineTheme`) and ensure `rules` are correctly structured and map to theme variables.
*   **(HIGH) Editor Polish (After Highlighting Fixed):**
    *   Wire up Edit Menu items (Undo/Redo integration).
    *   Implement "Save As..." functionality.
*   **(HIGH) Terminal Polish:**
    *   Add "Clear Terminal" command/button.
    *   Improve visual feedback for exited terminal processes.
*   **(MED) Main Menu / Accelerators:** Review standard menu items and accelerators for correctness and platform consistency.
*   **(MED) Error Handling:** Improve user feedback for filesystem/PTY errors.
*   **(LOW) File Management Extras:** New File/Folder, Delete, Rename.
*   **(LOW) Theming - VS Code Import:** Parse `.json` themes.
*   **(LOW) Font Loading:** Robust custom font loading.

**6. Future Ideas Brainstorm:**
*   Project-wide Search (`ripgrep`)
*   Git Integration (Status, Basic Commands)
*   Command Palette (Ctrl+Shift+P)
*   Snippets
*   Debugger Integration (DAP)
*   Plugin System
*   Settings UI (`electron-store`)
*   Remote/SSH Integration
*   Web Version (`vscode-web`)
*   AI Code Assistance
*   Markdown Preview
*   Advanced Layouts (`react-mosaic`)

**7. Action Requested:**
Based on the current state, particularly the non-functional syntax highlighting, what feature or fix should be prioritized next? (Fixing syntax highlighting is highly recommended).



*** OLDER PROMPTS BELOW - LEFT FOR REFERENCE****


Okay, my apologies for the previous incorrect assessment. Saving is a core function, and if it's broken, that needs to be the absolute top priority. I've updated the prompt to reflect this critical bug.

---

**Continuation Prompt for CodeCraft IDE Development**

**Project:** CodeCraft IDE - A desktop IDE using Electron, React, TypeScript.

**Current Status:**
The development environment uses a manual Vite configuration with a multi-terminal workflow (`dev:main`, `dev:vite`, `start`). The core architecture is functional, but **critical bugs exist**:

*   **Main Process (`src/main/index.ts`):** Handles window creation (starts fullscreen), standard application menu, IPC handling (Ping, Dialogs), manages multiple `node-pty` instances mapped by unique IDs, and handles filesystem operations (read dir/file, save file) via IPC. Hardware acceleration is disabled.
*   **Preload Script (`src/preload/index.ts`):** Exposes a type-safe `electronAPI` via `contextBridge` for all required IPC communication, including multi-terminal management, filesystem access, dialogs, and basic app/window controls.
*   **Renderer Process (`src/renderer`):** Uses React, TypeScript, and Vite.
    *   **Layout:** Uses `Allotment` for resizable horizontal (Sidebar/MainPanel) and vertical (Editor/Terminal Area) splits.
    *   **Theming:** Uses `ThemeContext` for managing theme name and font size modifier. Theme classes (`.theme-*`) applied dynamically. `CustomSelect` used for theme switching.
    *   **Contexts:** `ThemeContext`, `EditorContext`, `TerminalContext` are implemented.
    *   **Sidebar:** Features a working file tree (`FileTreeNode`) populated via IPC (`fs:readDirectory`), supporting directory expansion. Open folder functionality populates the tree root. Clicking files opens them in the editor via `EditorContext` / `fs:readFile`. Up-directory navigation works. Contains theme switcher.
    *   **Editor Area:**
        *   Managed by `EditorContext`, supports multiple file tabs (`TabContainer`, `Tab`).
        *   Handles opening, closing, focusing tabs, tracking dirty state (visible on tab).
        *   **BUG:** File saving (`fs:saveFile` IPC / Ctrl+S) is **NOT working correctly**. Reports indicate it fails to save changes.
        *   Renders a functional Monaco Editor instance (`EditorPanel`).
        *   Basic language detection based on file extension is active.
        *   *Syntax highlighting customization deferred.*
    *   **Terminal Area:**
        *   Managed by `TerminalContext`, supports multiple terminal tabs (`TerminalTabContainer`, `TerminalTab`) with a '+' button.
        *   Renders functional Xterm.js instances (`TerminalPanel`) for each tab using CSS visibility/layering.
        *   Backend PTY communication via IPC is functional and multi-instance aware.
        *   Terminal theme colors update based on the selected app theme.
        *   **Fixed:** Rendering glitches (blank screen, background color bleed, cursor offset) when switching tabs.
        *   **Fixed:** Width issues for full-screen terminal applications (e.g., `lynx`).

**Key Recent Achievements:**
*   Successfully implemented multi-terminal tabs.
*   Resolved terminal rendering and width issues upon tab switching.

**V1 Goals Recap (Updated Status):**
*   Functional Monaco Editor (Partially Done - multi-file tabs, basic highlighting. **Saving broken.**)
*   Integrated Terminal (xterm+node-pty) (Done - multi-terminal tabs, rendering/width fixed)
*   File Tree/Management (Partially Done - open folder, read dir/file, display tree. **Saving broken.**)
*   Theming (Foundation done. *Advanced features deferred.*)
*   Font Size Control (Done)
*   Movable/Resizable Panels (Done)

**Next Steps to Implement:**

1.  **(CRITICAL) Fix File Saving:**
    *   Diagnose why the `activeFileNow.isDirty` check in `EditorPanel.tsx`'s Ctrl+S handler might be failing or why the `saveActiveFile` function in `EditorContext.tsx` isn't successfully triggering the `fs:saveFile` IPC call or processing its response correctly.
    *   Use console logs extensively in `handleInternalChange` (EditorPanel), `updateActiveFileDirtyState` (EditorContext), the Ctrl+S handler (EditorPanel), and `saveActiveFile` (EditorContext) to trace the `isDirty` state and the save attempt flow.
    *   Verify the `fs:saveFile` IPC handler in `main/index.ts` is receiving the correct path and content and not encountering filesystem errors (permissions, etc.).
    *   Ensure the `content` state in `EditorContext` is correctly updated *after* a successful save to reset the dirty state.

2.  **(HIGH) Editor Polish (After Save Fixed):**
    *   Implement a **Status Bar** component.
    *   Wire up relevant **Edit Menu** items.
    *   Consider "Save As..." functionality.

3.  **(HIGH) Terminal Polish:**
    *   Add a "Clear Terminal" button/command.
    *   Improve visual indication when a terminal process has exited.

4.  **(MED) Theming - Syntax Highlighting Customization:**
    *   Revisit `EditorPanel.tsx` and add/refine `rules` in `defineTheme`.

5.  **(MED) Main Menu Integration & Accelerators:**
    *   Review menu items and ensure they trigger correct actions.
    *   Verify standard keyboard accelerators.

6.  **(MED) Error Handling:**
    *   Improve user feedback for errors (file ops, PTY).

7.  **(LOW) Theming - VS Code Import:**
    *   Implement IPC and parsing logic for `.json` themes.

8.  **(LOW) File Management Extras:**
    *   New File, New Folder, Delete, Rename.

9.  **(LOW) Font Loading:**
    *   Implement robust loading/fallback for custom fonts.

**Question:** The **absolute priority** is fixing the file saving functionality (Step 1).

---

**Future Ideas / "Cool Stuff" Brainstorm:**

*   **Search:** Implement project-wide text search (potentially using `ripgrep` via IPC). Find/Replace within the current editor file (using Monaco's built-in actions).
*   **Git Integration:** Display Git status in the file tree/status bar, provide basic Git commands (commit, push, pull) via UI elements and IPC calls to the `git` CLI.
*   **Command Palette:** Add a VS Code-style command palette (Ctrl+Shift+P) for quick access to commands (Open File, Change Theme, Git commands, etc.).
*   **Snippets:** Support for user-defined code snippets.
*   **Debugger Integration:** Integrate a debugger for a specific language (e.g., Node.js) using the Debug Adapter Protocol (DAP) - complex.
*   **Extensibility/Plugin System:** Design a basic plugin system to allow adding custom functionality or themes (very advanced).
*   **Settings UI:** Create a dedicated UI panel for managing settings (theme, font size, editor options, terminal options) instead of just the theme dropdown. Persist settings using `electron-store` or similar.
*   **Remote Development/SSH:** Allow opening folders and running terminals over SSH connections.
*   **Web Version:** Explore using the same codebase (with adjustments for Node APIs) to build a web-based version using something like `vscode-web`.
*   **AI Code Assistance:** Integrate with AI APIs (like CodeLlama, GitHub Copilot APIs, etc.) for code suggestions and completion (requires API keys, careful implementation).
*   **Markdown Preview:** Add a live preview panel for Markdown files.
*   **Improved Layout Options:** Use libraries like `react-mosaic` for more complex draggable/dockable panel layouts.


----


** BELOW THIS LINE IN THIS FILE IS OLD HISTORY **



---

**Continuation Prompt for CodeCraft IDE Development**

**Project:** CodeCraft IDE - A desktop IDE using Electron, React, TypeScript.

**Current Status:**
We have successfully set up the development environment using a manual Vite configuration with a multi-terminal workflow:
1.  Terminal 1: `npm run dev:main` (Compiles `src/main` and `src/preload` via `tsc --watch`)
2.  Terminal 2: `npm run dev:vite` (Runs Vite dev server via `vite`)
3.  Terminal 3: `npm start` (Launches the Electron app via `electron .`)

The application structure includes:
*   **Main Process (`src/main/index.ts`):** Handles window creation, IPC (Ping, PTY management, Dialog), application menu creation (File, Edit, View with Theme submenu), and `node-pty` management. Compiles to CommonJS. Hardware acceleration disabled.
*   **Preload Script (`src/preload/index.ts`):** Exposes an `electronAPI` via `contextBridge` for IPC (Ping, PTY, Dialog, Menu Theme/Open Folder actions). Compiles to CommonJS.
*   **Renderer Process (`src/renderer`):** Uses React, TypeScript, and Vite.
    *   **Layout:** Uses `Allotment` for a resizable vertical split between the Editor and Terminal panels, inside a main content area next to a fixed `Sidebar`.
    *   **Theming:**
        *   Uses React Context (`ThemeContext`) to manage the current theme name (`light`, `dark`, `win95`, `pipboy`, `mirc`).
        *   Applies theme classes (`.theme-*`) to the root and body elements.
        *   `index.css` defines extensive CSS variables and specific style overrides for each theme.
        *   Includes a custom React dropdown component (`CustomSelect.tsx`) for theme switching in the `Sidebar`.
        *   Top application menu (`View > Theme`) reflects and can set the current theme.
    *   **Editor Panel:** Renders a functional Monaco Editor instance using `react-monaco-editor`. Basic custom Monaco themes are defined and applied based on the selected app theme (e.g., `pipboy-monaco-theme`).
    *   **Terminal Panel:** Renders a functional Xterm.js terminal using manual `Terminal` instantiation and `FitAddon`. The terminal's colors are updated based on the selected app theme. IPC bridge (`pty-create`, `pty-input`, `pty-resize`, `pty-data`, `pty-exit`) is functional. Resizing via `FitAddon` and IPC is handled.
    *   **Sidebar:** Contains a placeholder for the file tree and the custom theme switcher dropdown.

**Key Dependencies Installed:** `electron`, `react`, `typescript`, `vite`, `monaco-editor`, `react-monaco-editor`, `xterm`, `xterm-addon-fit`, `node-pty`, `allotment`, `electron-squirrel-startup`.

**V1 Goals Recap (Original + New):**
*   Functional Monaco Editor (Done - basic)
*   Integrated Terminal (xterm+node-pty) (Done - basic)
*   File Tree/Management (Not started)
*   Theming (Foundation done: CSS Vars, aesthetic themes, VS Code compatible base needed)
*   Font Size Control (To be implemented)
*   Movable/Resizable Panels (Partially done - vertical split)

**Next Steps to Implement:**

1.  **File Management (Core Functionality):**
    *   **Sidebar UI:** Replace placeholder with a file/folder listing component.
    *   **Open Folder:** Wire up the "File > Open Folder..." menu item (and/or add a button) to trigger `dialog:openDirectory` IPC, store the selected path in the renderer state/context.
    *   **Read Directory:** Implement IPC handler (`fs:read-directory`) in main using Node `fs` to read contents of the selected path. Send file/folder list back.
    *   **Display Tree:** Populate Sidebar component with the list, make it expandable/collapsible.
    *   **Read File:** IPC handler (`fs:read-file`) in main to read file content.
    *   **Load in Editor:** On file click, trigger `fs:read-file` IPC, update Monaco Editor value and language mode.
    *   **Save File:** IPC handler (`fs:save-file`) in main. Add save mechanism (Ctrl+S, menu) in renderer to send content/path.
    *   **(Optional)** Tabs for multiple open files.

2.  **Theming System (Phase 2 - VS Code Integration):**
    *   IPC handlers for opening/reading VS Code theme `.json` files.
    *   Main process parser to extract colors (`workbench.colorCustomizations`, `tokenColors`).
    *   Map VS Code keys to our CSS variables & Monaco theme keys.
    *   Dynamically update CSS variables and apply `monaco.editor.defineTheme`.

3.  **Theming System (Phase 3 - Refinements):**
    *   Refine aesthetic theme definitions (CSS and Monaco) for better accuracy/completeness.
    *   Handle font loading robustly.

4.  **Font Size Control:**
    *   Re-implement a robust font size control mechanism (e.g., using context, updating CSS variables, ensuring editor/terminal resize correctly).

5.  **Layout Enhancements:**
    *   Consider adding horizontal splitting (e.g., Sidebar vs Main Content Area) using `Allotment`.
    *   Explore more complex layouts if needed (e.g., multiple editor groups like VS Code, potentially using React-Mosaic).

6.  **Terminal Refinements:**
    *   Improve visual handling of the `pty-exit` event.
    *   Add a "clear terminal" command/button.

7.  **Editor Enhancements:**
    *   Configure more Monaco options (minimap, word wrap, etc.).
    *   Indicate unsaved changes.

**Question:** Which of these next steps should we focus on now? (File Management is strongly recommended as the next core feature).

---